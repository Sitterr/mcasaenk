using System;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Text.Json.Serialization;
using Mcasaenk.Rendering;
using System.Diagnostics;
using System.Net;
using Mcasaenk;
using Mcasaenk.WorldInfo;

namespace Utils {
    public class AssetsUtils {


        public static string CreateVanillaDataAsset(string path_data) {
            List<string> lines = new() { "// automatically generated by Utils.AssetsUtils.CreateVanillaDataAsset" };

            lines.Add("-- BIOMES --");
            foreach(var file in Directory.GetFiles(Path.Combine(path_data, "minecraft", "worldgen", "biome"))) {
                var info = BiomeInfo.FromJson("minecraft:" + Path.GetFileNameWithoutExtension(file), File.ReadAllText(file));
                lines.Add(string.Join(";", info.ToParts()) + ";");
            }
            lines.Add("-- BIOMES --");
            lines.Add("");

            lines.Add("-- DIMENSIONS --");
            foreach(var file in Directory.GetFiles(Path.Combine(path_data, "minecraft", "dimension_type"))) {
                var info = DimensionInfo.FromJson("minecraft:" + Path.GetFileNameWithoutExtension(file), File.ReadAllText(file));
                lines.Add(string.Join(";", info.ToParts()) + ";");
            }
            lines.Add("-- DIMENSIONS --");

            return string.Join(Environment.NewLine, lines);
        }




        public static string[] GetVanillaBlockNames(string resourcepack) {
            return Directory.GetFiles(Path.Combine(resourcepack, "assets", "minecraft", "blockstates")).Select(f => "minecraft:" + Path.GetFileNameWithoutExtension(f)).ToArray();
        }
        
    }
}

static class Extentions {
    public static JsonElement getObjectOrFirstElement(this JsonElement element, string objectName) {
        if(element.ValueKind == JsonValueKind.Array) {
            return element.EnumerateArray().First().GetProperty(objectName);
        }
        return element.GetProperty(objectName);
    }
}